#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app").app;
var debug = require("debug")("serverside:server");
var http = require("http");
const fs = require("fs");
const https = require("https");
const { listen } = require("../app");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "8000");
app.set("port", port);
app.set("secPort", port + 696);

/**
 * Create HTTP server.
 */

// var server = http.createServer();

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on("error", onError);
// server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

// Create HTTPS server
let options = {
  key: fs.readFileSync(__dirname + "/private.key"),
  cert: fs.readFileSync(__dirname + "/certificate.pem"),
};

const secureServer = https.createServer(options, app);

// init socket io
const io = require("socket.io")(secureServer, {
  cors: {
    origin: "https://localhost:3000",
  },
});
//money line => export io in app.set()
app.set("socketIO", io);

//Listen on provided port
secureServer.listen(app.get("secPort"), () => {
  console.log(`Server app is listening on port: ${app.get("secPort")}`);
});
secureServer.on("error", onError);
secureServer.on("listening", onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = secureServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

module.exports = secureServer;
